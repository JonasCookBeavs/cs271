// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Not(in= instruction[15], out= AInstruction);
    Not(in= AInstruction, out= CInstruction);

    //And statement checks if we need to route to A Register
    //Mux decides if we are going to the A Register
    And(a= CInstruction, b= instruction[5], out= ALUToA);
    Mux16(a= instruction, b= ALUOutput, sel= ALUToA, out= ARegisterIn);

    Or(a= AInstruction, b= ALUToA, out= LoadA);
    ARegister(in= ARegisterIn, load= LoadA, out= ARegisterOut);

    Mux16(a= ARegisterOut, b= inM, sel= instruction[12], out= AMOut);

    And(a= CInstruction, b= instruction[4], out= LoadD);
    DRegister(in= ALUOutput, load= LoadD, out= DRegisterOut);

    ALU(x= DRegisterOut, y= AMOut, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= ALUOutput, zr= ZROut, ng= NGOut);

    Or16(a= ARegisterOut, b= false, out[0..14]=addressM);
    Or16(a= ALUOutput, b= false, out= outM);
    And(a= instruction[3], b= CInstruction, out= writeM);
    
    //Testing for jumps
    And(a= ZROut, b= instruction[1], out= JEQ);
    And(a= NGOut, b= instruction[2], out= JLT);
    
    Or(a= ZROut, b= NGOut, out= ZeroOrNeg);
    Not(in= ZeroOrNeg, out= Positive);
    And(a= Positive, b= instruction[0], out= JGT);

    Or(a= JEQ, b= JLT, out= JLE);
    Or(a= JLE, b= JGT, out= JumpToA);

    And(a= JumpToA, b= CInstruction, out= PCLoad);
    Not(in= PCLoad, out= PCInc);
    
    PC(in= ARegisterOut, load= PCLoad, inc= PCInc, reset= reset, out[0..14]=pc);
}